package com.korea.todo.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collector;
import java.util.stream.Collectors;

import org.apache.catalina.connector.Response;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.korea.todo.model.ResponseDTO;
import com.korea.todo.model.TodoDTO;
import com.korea.todo.model.TodoEntity;
import com.korea.todo.service.TodoService;

@RestController
@RequestMapping("todo")
public class TodoController {
	
	//실행할 때 service객체가 필드로 직접 주입이 됨
	@Autowired
	TodoService service;
	
	//주입받은 객체로 메서드를 실행하면 됨
	
//	@GetMapping("/test")
//	public ResponseEntity<?> testTodo(){
//		//service클래스에 있는 메서드를 호출
//		String str = service.testService();
//		List<String> list = new ArrayList<String>();
//		list.add(str);
//		ResponseDTO<String> response = ResponseDTO.<String>builder().data(list).build();
//		
//		return ResponseEntity.ok().body(response);
//	}
	
	
	@GetMapping
	//retriveTodoList메서드
	public ResponseEntity<?> retriveTodoList(){
		String temporaryUserId = "temporary-user";
		
		List<TodoEntity> entities = service.retrive(temporaryUserId);
		List<TodoDTO> dtos = entities.stream().map(TodoDTO::new).collect(Collectors.toList());
		
		ResponseDTO<TodoDTO> response = ResponseDTO.<TodoDTO>builder().data(dtos).build();
		
		return ResponseEntity.ok().body(response);
	}
	
	
	@PutMapping
	public ResponseEntity<?> update(@RequestBody TodoDTO dto){
		String temporaryUserId = "temporary-user";
		
		TodoEntity entity = TodoDTO.toEntity(dto);
		
		entity.setUserId(temporaryUserId);
		
		//서비스레이어의 update메서드를 이용해 entity를 업데이트함
		List<TodoEntity> entities = service.update(entity);
		
		//자바스트림을 이용해 반환된 엔티티리스트를 TodoDTO 리스트로 변환함
		List<TodoDTO> dtos = entities.stream().map(TodoDTO::new).collect(Collectors.toList());
		
		//변환된 TodoDTO
		ResponseDTO<TodoDTO> response = ResponseDTO.<TodoDTO>builder().data(dtos).build();	
		
		return ResponseEntity.ok().body(response);
	}
	
	
	
	@DeleteMapping
	public ResponseEntity<?> deleteTodo(@RequestBody TodoDTO dto){
		String temporaryUserId = "temporary-user";
		
		//TodoDTO객체를 TodoEntity 객체로 변환
		TodoEntity entity = TodoDto.toEntity(dto);
		
		entity.setUserId(temporaryUserId);
		
		List<TodoEntity> entities = service.delete(entity);
		
		//스트림을 이용해 List안에 있는 Entity객체를 DTO로 바꿈
		List<TodoDTO> dtos = entities.stream().map(TodoDTO::new).collect(Collectors.toList());
		
		//dtos 리스트를 ResponseDTO의 리스트에 담아서 반환
		ResponseDTO<TodoDTO> response = ResponseDTO.<TodoDTO>builder().data(dtos).build();
		
		return ResponseEntity.ok().body(response);
	}
	
	
	
	
	
	
}


//요청 -> Controller -> Service -> Repository -> Service -> Controller -> 응답